name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}    
        
    - name: Restore dependencies
      run: |
        echo "Starting restore process..."
        dotnet restore ThreadPilot.sln --verbosity normal
        echo "Restore completed successfully!"
      
    - name: Build solution
      run: |
        echo "Starting build process..."
        dotnet build ThreadPilot.sln --no-restore --configuration Release --verbosity normal
        echo "Build completed successfully!"
      
    - name: Run unit tests
      run: |
        dotnet test tests/Insurance.Tests/Insurance.UnitTests/Insurance.UnitTests.csproj \
          --no-build --configuration Release --verbosity normal \
          --collect:"XPlat Code Coverage" --results-directory ./coverage
        
        dotnet test tests/Vehicle.Tests/Vehicle.UnitTests/Vehicle.UnitTests.csproj \
          --no-build --configuration Release --verbosity normal \
          --collect:"XPlat Code Coverage" --results-directory ./coverage
          
    - name: Run integration tests
      run: |
        dotnet test tests/Insurance.Tests/Insurance.IntegrationTests/Insurance.IntegrationTests.csproj \
          --no-build --configuration Release --verbosity normal \
          --collect:"XPlat Code Coverage" --results-directory ./coverage
        
        dotnet test tests/Vehicle.Tests/Vehicle.IntegrationTests/Vehicle.IntegrationTests.csproj \
          --no-build --configuration Release --verbosity normal \
          --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Vehicle API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Vehicle.Api.Dockerfile
        push: false
        tags: threadpilot/vehicle-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Insurance API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Insurance.Api.Dockerfile
        push: false
        tags: threadpilot/insurance-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker-images]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.build-and-test.result }}" == "success" ] && \
           [ "${{ needs.build-docker-images.result }}" == "success" ] ; then
          echo "✅ All checks passed! ThreadPilot build is successful."
        else
          echo "❌ Some checks failed. Please review the build results."
          exit 1
        fi